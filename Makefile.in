#
# Autoconf + autoscan approach (no libtool / automake combination)
# Inspired by http://www.sax.de/unix-stammtisch/docs/autotools/autotools.html
#

TOP     := @srcdir@
SRC     := $(TOP)/src
TEST    := $(TOP)/test
BUILD   := $(CURDIR)/build
INCLUDE := $(TOP)/include

HOST           := @build@
TARGET         := @host@
TARGET_CC      := @CC@
TARGET_AR      := @AR@
TARGET_CFLAGS  := -I$(INCLUDE) -include config.h @CFLAGS@ -Wall -Wextra \
                  -Werror=attributes -MD
TARGET_LDFLAGS := -L$(BUILD) @LDFLAGS@

SHELL                 := @SHELL@
MKDIR_P               := @MKDIR_P@
INSTALL               := @INSTALL@
INSTALL_PROGRAM       := @INSTALL_PROGRAM@
INSTALL_STRIP_PROGRAM := @INSTALL_STRIP_PROGRAM@
INSTALL_SCRIPT        := @INSTALL_SCRIPT@
INSTALL_DATA          := @INSTALL_DATA@
PKG_CONFIG            := @PKG_CONFIG@

prefix       := @prefix@
exec_prefix  := @exec_prefix@
bindir       := @bindir@
libdir       := @libdir@
includedir   := @includedir@
libexecdir   := @libexecdir@
pkgconfigdir := @pkgconfigdir@

test_bin := cute_test_success cute_test_abort cute_test_freeze cute_test_segv \
            cute_test_term cute_test_fail cute_test_assert \
            cute_test_root_suite cute_test_complex_suite cute_test_pnp_suite
lib_src  := core.c posix.c report.c
headers  := cute/cute.h cute/utils.h

################################################################################
# Top-level targets
################################################################################

.PHONY: all
all: $(BUILD)/libcute.a $(BUILD)/libcute.so \
     $(addprefix $(BUILD)/static/,$(test_bin)) \
     $(addprefix $(BUILD)/shared/,$(test_bin))

ifeq ($(HOST),$(TARGET))
# Native build: tests may be run onto build host...
.PHONY: check
check: $(addprefix $(BUILD)/static/,$(test_bin)) \
       $(addprefix $(BUILD)/shared/,$(test_bin))
	env LD_LIBRARY_PATH="$(BUILD):$(LD_LIBRARY_PATH)" \
		testbindir="$(BUILD)" \
		$(TEST)/cute_test.sh
else
# Cross compiling: user must rely upon install-check to install tests so that
# they may be run onto final target.
check:
	$(warning ***check target disabled since cross compiling)
endif

.PHONY: install
install: install-exec

.PHONY: uninstall
uninstall:
	$(RM) $(addprefix $(DESTDIR)$(libdir)/,libcute.a libcute.so) \
	      $(DESTDIR)$(bindir)/cute_test.sh \
	$(RM) -r $(DESTDIR)$(includedir) \
	         $(DESTDIR)$(libdir)/cute \
	         $(DESTDIR)$(libexecdir)/cute

.PHONY: clean
clean:
	-find $(BUILD) \( -name "*.[oda]" -o -name "*.so" \) -delete

.PHONY: distclean
distclean: clean
	$(RM) Makefile config.h config.log config.status libcute.pc stamp-h \
	      stamp-h1

.PHONY: help
help:
	@echo "Build configuration:"
	@echo "  prefix         $(prefix)"
	@echo "  exec_prefix    $(exec_prefix)"
	@echo "  bindir         $(bindir)"
	@echo "  libdir         $(libdir)"
	@echo "  includedir     $(includedir)"
	@echo "  libexecdir     $(libexecdir)"
	@echo ""
	@echo "Available targets:"
	@echo "  all            build library and tests"
	@echo "  install        run install-exec target"
	@echo "  install-exec   install runtime library"
	@echo "  install-dev    install development files"
	@echo "  install-check  install tests"
	@echo "  uninstall      remove all installed files"
ifeq ($(HOST),$(TARGET))
	@echo "  check          run tests"
endif
	@echo "  clean          cleanup build objects"
	@echo "  distclean      cleanup build and configuration objects"
	@echo "  help           this help message"

################################################################################
# Build / install libraries
################################################################################

.PHONY: install-exec
install-exec: $(DESTDIR)$(libdir)/libcute.so

# Install shared library
$(DESTDIR)$(libdir)/libcute.so: $(BUILD)/libcute.so \
                              | $(DESTDIR)$(libdir)
	$(INSTALL_DATA) -T $< $@

# Build shared library
$(BUILD)/%.so: $(addprefix $(BUILD)/shared/,$(lib_src:.c=.o))
	$(TARGET_CC) $(TARGET_CFLAGS) -shared -fpic -o $@ $(filter-out %.h,$^)

$(DESTDIR)$(libdir):
	$(MKDIR_P) -m755 $@

################################################################################
# Install development files
################################################################################

.PHONY: install-dev
install-dev: $(DESTDIR)$(libdir)/libcute.a \
             $(addprefix $(DESTDIR)$(includedir)/,$(headers)) \
             $(DESTDIR)$(libdir)/cute/cute.lds \
             $(DESTDIR)$(pkgconfigdir)/libcute.pc

# Install header
$(DESTDIR)$(includedir)/%.h: $(INCLUDE)/%.h Makefile \
                             | $(DESTDIR)$(includedir)/cute
	$(INSTALL_DATA) -T $< $@

# Install linker script
$(DESTDIR)$(libdir)/cute/cute.lds: $(TOP)/cute.lds Makefile \
                                   | $(DESTDIR)$(libdir)/cute
	$(INSTALL_DATA) -T $< $@

# Install static library
$(DESTDIR)$(libdir)/libcute.a: $(BUILD)/libcute.a \
                               | $(DESTDIR)$(libdir)
	$(INSTALL_DATA) -T $< $@

# Install pkg-config file
$(DESTDIR)$(pkgconfigdir)/libcute.pc: libcute.pc \
                                      | $(DESTDIR)$(pkgconfigdir)
	$(INSTALL_DATA) -T $< $@

# Build static library
$(BUILD)/%.a: $(addprefix $(BUILD)/static/,$(lib_src:.c=.o))
	$(TARGET_AR) crs $@ $(filter-out %.h,$^)

$(DESTDIR)$(includedir)/cute $(DESTDIR)$(libdir)/cute $(DESTDIR)$(pkgconfigdir):
	$(MKDIR_P) -m755 $@

################################################################################
# Build / install testing files
################################################################################

.PHONY: install-check
install-check: $(addprefix $(DESTDIR)$(libexecdir)/cute/static/,$(test_bin)) \
               $(addprefix $(DESTDIR)$(libexecdir)/cute/shared/,$(test_bin)) \
               $(DESTDIR)$(bindir)/cute_test.sh

# Install statically linked test binaries
$(DESTDIR)$(libexecdir)/cute/static/%: $(BUILD)/static/% \
                                       | $(DESTDIR)$(libexecdir)/cute/static
	$(INSTALL_PROGRAM) -m755 -T $< $@

# Install dynamically linked test binaries
$(DESTDIR)$(libexecdir)/cute/shared/%: $(BUILD)/shared/% \
                                       | $(DESTDIR)$(libexecdir)/cute/shared
	$(INSTALL_PROGRAM) -m755 -T $< $@

# Install top-level test script
$(DESTDIR)$(bindir)/cute_test.sh: $(BUILD)/cute_test.sh \
                                  | $(DESTDIR)$(bindir)
	$(INSTALL_SCRIPT) -m755 -T $< $@

# Build top-level test script
$(BUILD)/cute_test.sh: $(TEST)/cute_test.sh Makefile | $(BUILD)
	sed -e 's;__LIBEXECDIR__;$(libexecdir);' $< > $@

# Build test with static libcute (use shared version for all other libs)
$(BUILD)/static/%: $(BUILD)/%.o $(BUILD)/libcute.a $(TOP)/cute.lds
	$(TARGET_CC) $(TARGET_CFLAGS) $(TARGET_LDFLAGS) -T $(TOP)/cute.lds \
		-o $@ $(filter %.o,$^) -Wl,-static -lcute -Wl,-Bdynamic

# Build test with shared libcute
$(BUILD)/shared/%: $(BUILD)/%.o $(BUILD)/libcute.so $(TOP)/cute.lds
	$(TARGET_CC) $(TARGET_CFLAGS) $(TARGET_LDFLAGS) -T $(TOP)/cute.lds \
		-o $@ $(filter %.o,$^) -Wl,-Bdynamic -lcute

$(BUILD)/%.o: $(TEST)/%.c Makefile | $(BUILD)
	$(TARGET_CC) $(TARGET_CFLAGS) @NO_TOPLEVEL_REORDER_CFLAGS@ -o $@ -c $<

$(DESTDIR)$(bindir) \
$(DESTDIR)$(libexecdir)/cute/static \
$(DESTDIR)$(libexecdir)/cute/shared:
	$(MKDIR_P) -m755 $@

################################################################################
# Build commom objects
################################################################################

# for static linking
$(BUILD)/static/%.o: $(SRC)/%.c Makefile | $(BUILD)/static
	$(TARGET_CC) $(TARGET_CFLAGS) -o $@ -c $<

# for dynamic linking
$(BUILD)/shared/%.o: $(SRC)/%.c Makefile | $(BUILD)/shared
	$(TARGET_CC) $(TARGET_CFLAGS) -fpic -o $@ -c $<

################################################################################
# Autoconf related files update
# See section 4.8.5 Automatic Remaking of autoconf manual
################################################################################

$(TOP)/configure: $(TOP)/configure.ac $(TOP)/aclocal.m4
	cd $(TOP) && autoconf

# autoheader might not change config.h.in, so touch a stamp file.
$(TOP)/config.h.in: $(TOP)/stamp-h.in
$(TOP)/stamp-h.in: $(TOP)/configure.ac $(TOP)/aclocal.m4
	cd $(TOP) && autoheader
	echo timestamp > $@

config.h: stamp-h
stamp-h: $(TOP)/config.h.in config.status
	./config.status

Makefile: $(TOP)/Makefile.in config.status
	./config.status

config.status: $(TOP)/configure
	./config.status --recheck

$(BUILD) $(BUILD)/static $(BUILD)/shared:
	$(MKDIR_P) $@

.SECONDARY:

# Include source dependencies
-include $(wildcard $(BUILD)/*.d)
-include $(wildcard $(BUILD)/static/*.d)
-include $(wildcard $(BUILD)/shared/*.d)
